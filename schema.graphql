### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Employee {
  cellphone: String
  city: String
  email: String!
  externalNumber: String
  id: Int!
  internalNumber: String
  name: String!
  rfc: String!
  role: String
  street: String
  token: String!
}

type Mutation {
  addToCart(cart: ShopppingCart!, product: Product!, quantity: Int!, supplierId: Int!): ShoppingCart
  authorizePayment(paymentMethod: PaymentMethodIn!, shippingAddress: ShippingAddressIn!, shoppingCart: ShopppingCart!): PurchasePayload
  cancelStartPayment(availableLines: [SaleLineIn!]!): Boolean
  createPaymentMethod(cardNumber: String!, clientId: Int!): PaymentMethod
  createProduct(brand: String!, description: String!, imageUrl: String!, name: String!, price: Int!, stock: Int!, volume: Int!): product
  createShippingAddress(city: String!, clientId: Int!, externalNumber: String!, internalNumber: String, street: String!): ShippingAddress
  deleteProduct(id: Int!): product
  login(email: String!, password: String!): User
  loginEmployee(email: String!, password: String!): Employee
  register(cellphone: String, email: String!, lastname: String, name: String!, password: String!): User
  registerEmployee(email: String!, lastname: String, name: String!, password: String!, rfc: String!): Employee
  removeLineCart(saleLineId: Int!, shoppingCart: ShopppingCart!): ShoppingCart
  startPayment(cart: ShopppingCart!): StartPaymentPayload
  updateProduct(id: Int!, newBrand: String!, newName: String!, newPrice: Int!): product
}

type Payment {
  amount: Float!
  concept: String!
  id: Int!
  paymentMethod: PaymentMethod!
}

type PaymentMethod {
  cardNumber: String!
  clientId: Int!
}

input PaymentMethodIn {
  cardNumber: Int!
  clientId: Int!
}

input Product {
  brand: String
  description: String
  id: Int!
  imageUrl: String
  name: String!
  price: Float!
  stock: Int
  suppliers: [SupplierIn]
  volume: Float
}

type PurchasePayload {
  payment: Payment!
  sale: Sale!
  shoppingCart: ShoppingCart!
}

type Query {
  beginSortingProcess(role: String!): [Shelf]
  getAllProducts: [product]
  getCart: ShoppingCart
  getPaymentMethods: [PaymentMethod]
  getProductsByName(name: String!): [product]
  getShippingAddresses: [ShippingAddress]
  logedIn: User
  singleProduct(product: Product!): product
}

type Sale {
  date: String!
  id: Int!
  saleLines: [SaleLine!]!
  shippingAddress: ShippingAddress!
  total: Float!
}

type SaleLine {
  amount: Int!
  batchId: Int!
  cart_sale_id: Int!
  price: Float!
  product: product!
  saleLineId: Int!
  subTotal: Float!
  supplier: Supplier!
  supplierId: Int!
}

input SaleLineIn {
  amount: Int!
  batchId: Int!
  cart_sale_id: Int!
  price: Float!
  product: Product!
  saleLineId: Int!
  subTotal: Float!
  supplier: SupplierIn
  supplierId: Int!
}

type Section {
  capacity: Float!
  product: product!
  sectionNumber: Int!
  shelfId: Int!
}

type Shelf {
  id: Int!
  sections: [Section!]!
  shelfManagerId: Int!
  sortedDate: String!
  warehouseManagerId: Int!
}

type ShippingAddress {
  city: String!
  clientId: Int!
  externalNumber: String!
  id: Int!
  internalNumber: String
  street: String!
}

input ShippingAddressIn {
  city: String!
  clientId: Int!
  externalNumber: String!
  id: Int!
  internalNumber: String
  street: String!
}

type ShoppingCart {
  cartLines: [SaleLine!]!
  id: Int!
  lastUpdate: String!
  total: Float!
}

input ShopppingCart {
  id: Int!
  lastUpdate: String!
  saleLines: [SaleLineIn] = []
}

type StartPaymentPayload {
  availableLines: [SaleLine!]!
  nonAvailableLines: [SaleLine!]!
  shoppingCart: ShoppingCart!
  total: Float!
}

type Supplier {
  company: String!
  id: Int!
  stock: Int
}

input SupplierIn {
  company: String!
  id: Int!
}

type User {
  email: String!
  id: Int!
  lastLoginDate: String!
  name: String!
  profileUrl: String
  shoppingCart: ShoppingCart
  token: String!
}

type product {
  brand: String
  description: String
  id: Int
  imageUrl: String
  name: String
  price: Float
  stock: Float
  suppliers: [Supplier]
  volume: Float
}